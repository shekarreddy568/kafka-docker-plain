---
version: '3.4'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'

  connect:
    build: .
    image: confluentinc/cp-kafka-connect-custom:latest
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_PLUGIN_PATH: '/usr/share/java,usr/share/kafka-connect,/usr/share/confluent-hub-components'
  
  ibmmq:
    image: ibmcom/mq # https://hub.docker.com/r/ibmcom/mq/
    hostname: ibmmq
    container_name: ibmmq
    environment:
      LICENSE: accept
      MQ_QMGR_NAME: QM1
      MQ_ADMIN_PASSWORD: passw0rd
      MQ_APP_PASSWORD: passw0rd
    # volumes:
    #     - ../../connect/connect-ibm-mq-source/security/snakeoil-ca-1.crt:/etc/mqm/pki/keys/mykey/ca.crt
    #     - ../../connect/connect-ibm-mq-source/security/ibmmq.certificate.pem:/etc/mqm/pki/keys/mykey/tls.crt
    #     - ../../connect/connect-ibm-mq-source/security/ibmmq.key:/etc/mqm/pki/keys/mykey/tls.key
    ports:
      - '1414:1414'
      - '9443:9443'

  # ksqldb-server:
  #   image: confluentinc/ksqldb-server:0.15.0
  #   hostname: ksqldb-server
  #   container_name: ksqldb-server
  #   depends_on:
  #     - broker
  #   ports:
  #     - "8088:8088"
  #   environment:
  #     KSQL_LISTENERS: http://0.0.0.0:8088
  #     KSQL_BOOTSTRAP_SERVERS: broker:9092
  #     KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
  #     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"

  # ksqldb-cli:
  #   image: confluentinc/ksqldb-cli:0.15.0
  #   container_name: ksqldb-cli
  #   depends_on:
  #     - broker
  #     - ksqldb-server
  #   entrypoint: /bin/sh
  #   tty: true

  # # MongoDB Replica Set
  #   mongo1:
  #     image: "mongo:latest"
  #     hostname: mongo1
  #     container_name: mongo1
  #     command: --replSet rs0 --oplogSize 128
  #     volumes:
  #       - rs1:/data/db
  #     ports:
  #       - "27017:27017"
  #     restart: always
  #   mongo2:
  #     image: "mongo:latest"
  #     hostname: mongo2
  #     container_name: mongo2
  #     command: --replSet rs0 --oplogSize 128
  #     volumes:
  #       - rs2:/data/db
  #     ports:
  #       - "27018:27017"
  #     restart: always
  #   mongo3:
  #     image: "mongo:latest"
  #     hostname: mongo3
  #     container_name: mongo3
  #     command: --replSet rs0 --oplogSize 128
  #     volumes:
  #       - rs3:/data/db
  #     ports:
  #       - "27019:27017"
  #     restart: always    

  # volumes:
  #   rs1:
  #   rs2:
  #   rs3:
  # mysql:
  #   image: mysql:5.7
  #   hostname: mysql
  #   container_name: mysql
  #   depends_on:
  #     - connect
  #   ports:
  #     - "3306:3306"
  #   environment:
  #     MYSQL_ROOT_PASSWORD: confluent 
  #     MYSQL_USER: confluent 
  #     MYSQL_PASSWORD: confluent 
  #     MYSQL_DATABASE: connect_test

  # postgres:
  #   image: postgres:latest
  #   hostname: postgres
  #   container_name: postgres
  #   environment:
  #     POSTGRES_PASSWORD: confluent 

  # postgres:
  #   image: centos/postgresql-10-centos7:latest
  #   hostname: postgres
  #   container_name: postgres
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRESQL_ADMIN_PASSWORD: postgres
